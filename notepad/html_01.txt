1. 웹 이란

- 인터넷상의 정보를 하이퍼텍스트방식과 멀티미디어 환경에서 검색할 수 있게 해주는 정보검색 시스템이다. 
- 하이퍼텍스트 형식으로 표현된 인터넷상의 다양한 정보를 효과적으로 검색하는 시스템
- 하이퍼텍스트는 웹브라우저를 통해 웹 서버 "문서"나 웹페이지등의 데이터를  컴퓨터 모니터를 통해 출력하는 형태로 보이게 된다.
 (HTML-> Hyper Text Markup Language)그리고 사용자는 각 페이지에 있는 하이퍼링크를 따라 다른 문서로 이동하거나, 
	그 페이지를 서비스하고 있는 서버로 일련의 정보를 보낼 수도 있다. 

-하이퍼링크를 따라 이동하는 행위를 흔히 웹 서핑 또는 웹 브라우징이라 하고 관련된 내용들이 모여있는 웹 페이지들의 집합을 웹사이트 한다.
	 ->  -월드 와이드 웹(World Wide Web),WWW,W3
-웹의 기능으로  첫 번째 통일된 웹 자원의 위치 지정 방법 ->  URL. 
-두 번째 웹의 자원 이름에 접근하는 프로토콜(protocol) ->  HTTP, 
-세번째 자원들 사이를 쉽게 항해 할 수 있는 언어 ->  HTML ,CSS,Javascript, jQuery등


HTML -> Element
Element(요소)
<여는태그 속성="속성값"> 컨텐츠 </닫는태그>
<여는태그> 컨텐츠(요소,이미지,동영상,,,)</닫는태그>
<태그> -> 단일 태그 <img>, <input>, <br>, <hr>

<div class="c1" id="b1"> 블록요소 </div>
- div -> 태그(tag)
- "블록요소" -> 컨텐츠(content)
- class, id -> 속성(property)

2. HTML 요소
	     요소(Element)
<h1 id="title1">hellow World</h1>

h1  -> 태그 
hellow World  -> 컨텐츠-> 텍스트, 이미지, 동영상, 오디오,,,
id  -> 속성 


HTML은   <html>   </html> 안에  요소(element)들을 위치
<!DOCTYPE html>      DTD -> 문서 지정형식 -> HTML5
<html>
<head> 
	html문서 정보 
</head>
<body>
	브라우저에 표시 -> 실제 컨텐츠
</body>
</html>


*** 주석
<!-- 해석, 설명글, 컴파일X  -->


3. block , inline   

-block
1. width(너비) , height(높이)값을 설정할 수 있다.
2. width값을 설정 안하면 부모태그 너비의 100%
3. 블록요소 생성 시 수직방향으로 생성 된다.(줄바꿈)
4. 블록 속성을 가진 태그를 화면 구성이나 레이아웃에 주로 사용
- div, p, h1~h6, table, form,ol, ul, li, dt,dd,dl
- 시맨틱태그(header,nav,footer,section),
*** 웹 사이트의 레이아웃 설정 -> div -> 가장 많이 사용되는 요소

*h1~h6 -> 제목관련태그
*div   ->웹페이지 레이아웃, 가장많이 사용되는 태그
div안에 header,container,footer


- inline   
1. width, height값을 설정할 수 없다
2. width값을 설정 안하면 컨텐츠 너비
3. 하위요소 추가 생성 시 부모의 오른쪽으로 정렬 배치(줄바꿈X)
4. 블록 속성을 가진 태그를 화면 구성이나 레이아웃에 주로 사용
- a , span, img,  strong등

-   inline-block  -> inline
1. width, height값을 설정할 수 있다.
2. width값을 설정 안하면 컨텐츠 너비
3. 하위 요소 추가시 생성 시 부모의 오른쪽으로 정렬 배치(줄바꿈X)
4. 자동으로 좌우 여백이 생긴다
5. display속성을 이용해서 설정 inline-block->block 
	-> img


*** 이미지나 텍스트를 클릭하면 - 이동경로,페이지로 이동
<a href="이동경로,페이지" >텍스트</a>
<a href="이동경로,페이지" >이미지</a>

**** href값은 반드시 설정해야된다. 기본이 # -> 임시링크
<a href="#" >텍스트</a>
<a href="http://naver.com" >네이버</a>


*** 이미지 img -> 단일 태그
<img> 기본적으로 인라인이기 때문에 기본 여백이 있다 -> display:block -> 여백을 없애준다

<img src="이미지경로" alt="이미지가 없을 경우 대체텍스트">

  <a href="http://apple.com"> <img src="images/apple.png"  alt="apple">  </a>


<video></video>
<audio></autio>


// 컨텐츠의 경로 설정
*** 절대경로->어디서나(PC) 접근가능
*** 상대경로->기준(서버,위치,상대)에 경로설정
	->     현재 자신의 파일 기준  ./   ./css/block1.css
	->     현재 자신의 파일 기준        css/block1.css
현재위치는 ./ 라는 뜻

CSS ->   HTML -> 구조를 디자인 
css 선택자(태그, 아이디, 클래스, 자식, 하위, 그룹....)
css 를 적용 방법

선택자 -> 태그이름, 속성이름

선택자{
	속성:값;
	속성:값;
}

h1{	
	background-color:#ffff00;
	border: 1px solid:#ff0000;
	width:200px;
	height:100px;
}

기본적으로 html 실행하면 margin,padding 값이 설정되어 있다
margin -> "나하고 부모 또는 다른 컨텐츠와의 여백"
padding -> "나하고 내 자식 컨텐츠와의 여백"

reset.css  -> 기본적인 스타일을 설정 -> 모든파일에 공유
html 파일 생성시 기본으로 설정 되어야 되는 필수 css

1. 프로젝트 폴더 생성
2. 하위폴더 생성 css, images, js
3. css 폴더 아래 common 폴더 아래 reset.css 생성
@import url(다른 css파일을 연결);
/*common 폴더 하위의 reset.css 연결*/
@import url(common/reset.css); 


reset.css 내용->
* -> 전체 선택자, html 모든 요소 선택
*{
    margin: 0;
    padding: 0;
}
html, body{
    width: 100%;
    height: auto;
}


1. HTML 필수 요소(태그)
<html> 모든 HTML 문서의 최상위 요소 -> root element
<head> HTML 페이지의 설정, 스타일, 스크립트 적용, 외부파일 링크(연결)
<body> HTML 페이지의 표시될 내용 -> 브라우저에 표시

2. <head> 안에 포함되는 요소
<meta> : HTML페이지의 + 설정 및 정보
<title> : 브라우저 탭에 표시될 제목
<style> : CSS (내부 스타일 설정)
<link> : CSS 외부파일을 연결 필수 CSS는 외부스타일로 연결(반드시)
<script> : 내부 자바스크립트 작성 및 외부 자바스크립트 파일 명시 

HTML 필수 디렉토리(폴더) 기본3개
- css 	-> css 파일 저장
- images	-> 이미지 파일 저장
- js	-> 자바스크립트 파일 저장
하나의 html 파일에 하나의 css파일 외부 스타일로 연결
block1.html <-> block1.css
html파일 처음 실행 하면 기본적으로 margin(여백)이 설정 되어 있다
html파일 작업시 기본적인 스타일을 설정할 css파일 만들어 주어야한다 -> reset.css
모든 html파일에 적용 될 공통 css 폴더를 만들어 reset.css를 만든다


3. 단락(블록) 요소 -> block, 프로젝트 기본 레이아웃 설정 요소
- width, height 값을 설정 할 수 있다
- width값을 적용하지 않으면 자동으로 부모의 너비의 100%
- 하위 요소 추가시 자동으로 수직방향으로 정렬
- 가로 배치를 할 경우 -> float, clear:both, flex, grid
- display속성을 이용해서 설정 block -> inline

<div> : division의 약자로 영역을 의미 -> 가장 많이 사용되는 태그
<h1~h6> 제목 , h1 -> 로고에 사용하는 경우가 많다

dl dt dd : 목록태그
<ol> : 순서 있는 목록 <li>로 항목 표시
<ul> : 순서 없는 목록 <li>로 항목 표시 -> GNB에 가장 많이 사용
<li> : 리스트 -> ul, ol과 같이 사용
<p> : 앞뒤로 '여백'있는 문단 형성 -> qhxhd xprtmxmfhaks rntjd
<table> : form -> 회원가입폼, 로그인폼, 정형화된 구조에 사용
<form> : 사용자의 입력 정보를 서버에 전송해주는 요소

CSS( Cascading Style Sheets) -> HTML 구조를 스타일 적용
웹페이지를 꾸미는 스타일 언어

큰영역 -> 작은 영역, 위 -> 아래
하위 컨텐츠가 있으면 부모의 heighe:auto 설정 하는 것이 좋타 <- 프로젝트 작업시
자식태그가 하나밖에 없으면 > 를 사용하지 않고 부모 > 자식, 부모 자식(하위선택)

하나의 html문서에는 하나의 css문서를 링크(link) 시키자
컨텐츠(이미지,동영상,오디오등), 파일(문서), 링크(연결)시 경로 설정 방버
1. 절대 경로 	-> 어디서든지 접근 가능 -> 웹계정 전체URL
2. 상대 경로	-> 기준위치에서 접근 가능 -> 현재파일 위치
		-> 같은 형제 위치 접근 css/ , ./css
		-> 한단계위 ../ 두단계위 ../ ../

아이디 선택자 -> 하나의 요소만 선택, 태그명#아이디명 -> #아이디명
	예) <div id="wrap"></div> <p id="p1"></p> p#p1
	div#wrap -> #wrap
	태그명을 생략하면 div 요소라 인식 #아이디명

클래스 선택자 -> 하나 이상의 요소에 선택, 동일한 스탕리 적용 -> .클래스명
		가장많이 사용하는 선택자	태그명,클래스명
	예) <div class="header"></div> div.header -> .header
	<p class="s1"></p><div class="s1"></div><h1 class="s1"></h1>
	p.s1, div.s1, h1.s1 -> .s1{}
	태그명을 생략하면 div요소라 인식
	하나의 태그에 여라 클래스가 설정 되었을 경우
	<div class="box b1">BOX(블록)</div> -> .box.b1
자식 선택자 -> 선택자 > 자식태그(선택자 바로아래 태그)
		.header > .inner-header
하위 선택자 -> 선택자 하위태그(선택자 하위태그 -> 자식포함)
		.header .inner-header

# wrap 자식태그 .header .container .footer 
	-> #wrap > . header(자식만)
# wrap 하위태그 .header .container .footer(자식) + .nav(하위모든 태그)
    	-> #wrap .header(하위모든 태그)

<div id="wrap">
	<div class="header">header
		<div class="nav">nav</div>	
	</div>
	<div class="container">container</div>
	<div class="footer">footer</div>
</div>

크기 설정 기본
width : 컨텐츠의 너비, block 태그의 너비는 설정 하지 않으면 부모의 100%
height : 컨텐츠의 높이 auto(자식컨텐츠의 높이에 따라 자동으로 설정)->

단위 :
1. 100% -> 부모 기준으로 설정
2. auto -> 자식 기준으로 설정

색상 : 웹 기본 색상모드(RGB) Red Green Blue -> 빛의 3원색 -> 색광모드 -> 가산혼합(색을 혼합 할 수록 밝아진다)
1. 16진수 01~9abcdf 0(x), f(원색)
	#RGB
	#RRGGBB
	#ff0000 -> red
	#ff0000 -> red
	#00ff00 -> green
	#0000ff -> blue
	#000000 -> black
	#ffffff-> white

2. 10진수
	RGB(255,0,0) -> red
	RGB(0,255,0) -> green
	RGB(0,0,255) -> blue
	RGB(0,0,0) -> black
	RGB(255,255,255) -> white

컨텐츠 가로 가운데 정렬 방법
1. margin:0 auto -> (컨텐츠 좌우 마진합/2)을 컨텐츠의 좌우 마진크기로 설정
2. position
3. flex
4. grid

margin(마진) : "나하고 나의 부모 또는 다른 컨텐츠와의 여백" -> 별도로 수업 예정
margin-left -> 나의 왼쪽, 우선적용
margin-top -> 나의 위쪽
margin-right -> 나의 오른쪽
margin-bottom -> 나의 아래쪽

padding : "나하고 자식 컨턴츠와의 여백" -> 심미성, 안정감 -> 별도로 수업 예정
padding-left -> 왼쪽
padding-top -> 위쪽
padding-right -> 오른쪽
padding-bottom -> 아래쪽

padding : 위 오른 아래 왼
padding : 위/아래 오른/왼
padding : 모두
-> padding 설정시 기존 width, height 크기를 변하지 않게 설정 하려면 box-sizing:border-box 설정 필요

텍스트, 폰트
1. font-familly : 글꼴 -> 고딕(Sans-serif), 명조(Serif) -> 웹의 기본 font(돋음, 16px)
2. font-style : italic
3. font-size : 크기, 높이 기준 -> 고정형(px, cm, mm), 상대형(%, rem, em, vh, vw)
4. font-weight : 굵기, bold(굵다), 100~900
5. color : 글꼴 색상, 16진수 #ff0000(기본) , 10진수 rgb(255,0,0), 예약된 문자(red,blue,,,)
	rgba(R,G,B,A), alpha(0~1)
	-> 별도로 bord(테두리)에 색상을 설정 하지 않으면 color 설정 색상을 bord에 적용된다

h1 태그의 텍스트는 자동으로 굵게 설정

텍스트 문단
text-align : left(기본), center, right
text-decoration : underline(밑줄) -> a태그는 기본이 underline(밑줄)
text-indent : 문단의 첫줄 들여쓰기
line-height : 행높이 -> 한행만 있을 경우 부모요소의 높이와 line-height의 값이 같으면 세로가운데
text-shadow : x y blue 색상 -> 텍스트 그림자 -> CSS3
br -> 계행 한줄(enter) 

<div> : 


블록요소 가로정렬 하는법
1. float 이용 -> "붕~~띄워서 부모의 좌우에위치" -> 기본
	float:left -> 왼쪽 -> 기본정렬, 가장 많이 사용 -> 여러태그에 적용하면 차례대로
	float:right -> 오른쪽 -> 리스트에 적용시 순서가 바뀜
clear:both 설정하여 부모요소의 높이 오류를 보완 할수 있다
float설정 요소 다음 블록요소에 clear:both설정
가상태그를 이용하여 clear:both 설정을 할 수 있다. -> 실무에서 많이 사용
	li::after{
		content:";
		display:block;
		clear:both;
	}

부모요소에 overflow:hidden -> 제한적으로 사용(하위요소 없을 시)
2. margin, padding 이용
3. position 이용
4. flex 이용 <<< >>> 우리프로젝트에서는 flex 기본 사용
5. grid 이용
6. inline-block 이용

navigation -> 비순서성, 사용자의 요청을 서버전달 -> 사용자의 요구 -><- 응답서버
gnb(Global Navigation Bar) 공용네비게이션


border -> 테두리
-> border:1px solid #ff0000 -> 좌/위/오/아
left, top, right, bottom -> 동시에 적용

border: 크기 스타일 색상
border-width: 크기 px
border-style: 모양 solid(실선), dotted(작은점선), dashed(약간긴점선)
border-color: 색상
border: 크기모양 색상; 크기모양 색상
-> border: 1px solid #ff0000; -> 좌/위/오/아
left,top,right,bottom -> 적용하고 싶은 위치 적용
border-left- : 왼쪽
border-top- : 위쪽
border-right- : 오른쪽
border-bottom : 아래쪽
border-radius -> 테두리 모양  정사각형의 반지름으로 4곳에 설정(정원) (왼위 오른위 오른아래 왼 아래)
border-radius 50% -> 정사각형일 경우 정원이 된다

기본 box-sizing 설정시 에는 실제 크기는 border+컨텐츠크키

기본(생략) box-sizing: content-box
너비 = width+border+padding width:100px;border:5px solid; padding:5px
	100%+5px*2+5px*2 -> 100%+10+10 -> 120
높이 = heigth+border+padding -> 130px

box-sizing: border-box -> 정해진 width 값은 변하지 않는다.. border값까지 포함
width 값을 설정하면 border+padding 포함하는 설정
너비 = width+border+padding width: 100px; border:5px solid; padding:5px
100px+5px*2+10px -> 100px(70px+5px*2+10px*2)
높이 = heigth+border+padding

max-width -> 컨텐츠의



Flexbox
1) flexbox 인터페이스 내의 아이템 간 공간 배분과 강력한 정렬 기능을 제공하기 위한 1차원 레이이아웃 모델로 설계 -> 가로정렬
2) flexbox를 1차원이라 칭하는 것은, 레이아웃을 다룰 때 한 번에 하나의 차원(행이나 열)만을 다룬다는 뜻입니다
3) 기존 방식보다 훨씬 강력하고 편리한 기능
4) 부모 요소인 container를 Flex Container(플렉스 컨테이너)
5) 자식 요소인 item들을 Flex Item(플렉스 아이템)
6) 컨테이너가 Flex의 영향을 받는 부모요소, 설정된 속성에 따라 각각의 아이템들이 배치

container(부모요소)에 속성 설정
display: flex, display:inline-flex
flex-direciton -> row(기본값)
flex_wrap wrap: -> 하위 요소가 많으면 다음행으로 넘쳐 흐른다
flex_flow

justify-content		: flex-start; -> 하위요소가 기본배치(앞부터)기본
(중심축에서 아이템배치)	: flex-end; -> 하위요소가 기본배치(끝부터)
가장많이 사용된다(gnb)	: center -> 하위요소가 기본배치 (가운데부터)
			: space-between -> 하위요소가 처음과 끝 사이에 같은간격
			: space-around -> 하위요소가 동일한 여백으로 설정(처음과 끝이 같음)
			: space-evenly -> 하위요소가 동일한 여백으로 설정(좌우간격같게)
			

align-items
(반대축에서 item 배치) -> 높이를 설정
			: align-items:center -> 반대축 가운데		
			: align-items:baseline -> 텍스트 중심
			: align-items:strectch -> 기본 height:auto일 경우 container height의 100%
			: align-items:flex-start -> 처음
			: align-items:flex-end -> 끝
align-content
flex-wrap: wrap -> 두줄 이상
			: align-content:space-between; -> 반대축 끝에 items를 배치하고 간격 같게
			: align-content:center; -> 반대축 중간에 items를 배치


items(자식요소)에 속성 설정
order : 1, 2, 3 -> item의 순서를 지정 -> 기본 0, 큰수가 뒤로
flex-grow : 기본(0, 원래지정값), 1, 2, 3 크기가 상대적으로 변한다, 같은 비율로 변화 '커진다'
flex-shrink : 기본(0), 1, 2, 3 items이 줄어 들었을때 상대적으로 변한다 2 -> 2배로 wnfdjemsek '작아진'
flex : 1 1 0; -> flex: flex-grow flex-shrink flex-basis (flex 자식요소크기 설정)
flex-basis : auto(지정값), 30% 지정값 대로 상대 변화
align-self : 특정 item의 위치를 배치
flex:1 -> 선택된 item 전체의 상대비율 1이다(부모에 대해서 동일비율)

max-axis(중심축) -> flex container방향에 따라 다르다
cross-axis(반대축) -> max-axis(중심축)의 반대방향

background -> 컨텐츠 높이 따라 height값이 정해진다. 높이를 설정할수 있다

background-color : 배경색 #ff00000
background-image : 배경 이미지 url(이미지경로)
background-repeat : 반복 유무, repeat-x, repeat-y, no-repeat, 기본이(x,y 반복)
background-position : 위치 x, y -> 50%(정중앙)	
background-size : 크기 x, y -> cover(부모의 width), contain(부모의 height)

background-attachment : 고정(fixed), 기본(scroll)

background : 색상 이미지경로 반복유무 위치/크기
background : #cccccc url(이미지 경로) no repeat 50%/cover
background : 색상
background : url(이미지경로) no-repeat 50%/cover

vh, vw 기준이 브라우저 기준 scroll은 제외

100vw -> 브라우저 너비의 100% -> width:100% -> 부모의 100% 브라우저+다른태그
100vh -> 브라우저 높이의 100% -> height:100% -> 부모의 100% 브라우저+다른태그

css calc함수 -> 계산(width, height)
cal()

cal( 100vh - 100px - 184px)